<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context" 
    xmlns:mybatis="http://mybatis.org/schema/mybatis-spring"
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
        http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring.xsd">

    <!-- bean definitions here -->
    <!-- HikariDataSourceUtill 참고 -->
    <!-- 'springFrameWork'가 HikariConfig hikariConfig = new Hikariconfig(); 생성자 호출 -->
    <bean id="hikariConfig" class="com.zaxxer.hikari.HikariConfig"> <!-- 기본 생성자 호출/ HikariConfig hikariConfig = new HikariConfig();-->
        <!-- hikariConfig.setDriverClassName("....") 메서드 호출 -->
        <property name="driverClassName" value="oracle.jdbc.OracleDriver" /> <!-- hikariconfig.setDriverClassName("oracle.jdbc.OracleDriver"); -->
        <property name="jdbcUrl" value="jdbc:oracle:thin:@localhost:1521:xe" /> <!-- config.setJdbcUrl("jdbc:oracle:thin:@localhost:1521:xe"); -->
        <property name="username" value="scott" /> <!--  config.setUsername("scott");  -->
        <property name="password" value="tiger" /> <!--  config.setPassword("tiger"); -->
    </bean> <!-- springFarmework가 사용. -->
    <!-- 결과: hikariConfig객체가 생성됨.  -->
    <!-- bean == instance(생성된 객체) / bean내의 property는 setter() 호출.-->

    <!-- HikariDataSource dataSource = new HikariDataSource(hikariConfig);-->
    <bean id="dataSource" class="com.zaxxer.hikari.HikariDataSource">
        <constructor-arg ref="hikariConfig" /> <!-- argument 설정. + ref: 참조변수(생성되어 있는 객체) -->
    </bean>
    
    <!-- SqlSessionFactoryBean 객체:
        Data Source(Connection Pool)을 이용해서 SQL 문장들을 실행하고 결과 처리를 수행하는 객체.
        ==> DAO
        ==> Mybiats가 가지고 있음
        ==> context Framwork에 설정
     -->
     <bean id="SessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
         <!-- property name: 클래스가 가지고 잇는 맴버 변수(field) 이름-> setdataSource,
          ref: argument 전달. -> 25줄의 id를 찾아감. 즉, HikariDataSource를 객체를 아규먼트로 전달. 이용해서 사용.-->
        <property name="mapperLocations" value="classpath:/mappers/**/*.xml"></property> 
        <!-- value: argument의 값을 문자열로 전달. 
            classpath를 찾아간다. 즉, classpath란: Java Resources의 main 하위 폴더들을 검사. 즉, 프로젝트가 사용할 수 있는 폴더들
            **: 하위 폴더를 더 만들어도 된다. 즉, mappers 밑의 하위폴더들이 몇개 더 있어도 된다.
            *: 확장작가 xml인 모든 파일.
        -->
     
     </bean>

</beans>